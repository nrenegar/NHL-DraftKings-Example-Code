lines(lowess(Players_Start$Actual_to_predict~Players_Start$Salary), col="blue") # lowess line (x,y)
#Plot chart for max(dff, fsp, dff_fsp) predictions
plot(Players_Start$Salary, Players_Start$Actual_to_predict_max, main="Scatterplot max Projection_dff_fsp",
xlab="Salary", ylab="Actual to Predicted Success", pch=19)
abline(lm(Players_Start$Actual_to_predict_max~Players_Start$Salary), col="red") # regression line (y~x)
lines(lowess(Players_Start$Actual_to_predict_max~Players_Start$Salary), col="blue") # lowess line (x,y)
library(hashmap)
library(caTools)
library(data.table)
library(lubridate)
library(rpart)
library(rpart.plot)
library(xgboost)
library(glmnet)
library(dplyr)
library(tidyr)
# Clear the workstation and read in data
rm(list=ls())
date_string ="20191130"
num_lineups = 20
path_to_proj = "/Users/nicholasrenegar/Google Drive/NJR Sports/NFL Draftkings"
setwd(path_to_proj)
#=====================================================================#
#            Import All Aggregate Results and Combine                 #
#=====================================================================#
LineupFileNames = list.files(paste(path_to_proj,'/Model/Output/Results/',sep=''))
LineupFileNames = LineupFileNames[grep("Lineup", LineupFileNames)]
Lineups <- data.frame(matrix(ncol = 22, nrow = 0))
for (filename in LineupFileNames){
currentLineup = read.csv(file = paste(path_to_proj,'/Model/Output/Results/',filename,sep=""), header = TRUE)
currentLineup$Filename = filename
Lineups <- rbind(Lineups,currentLineup)
}
Lineups = na.omit(Lineups)
#=====================================================================#
#                 Get Aggregate Results by Parameters                 #
#=====================================================================#
agg_results <- aggregate(Lineups$ROI, by=list(Lineups$points_system,
Lineups$max_games,
Lineups$Date), FUN=mean)
agg_results_points_system <- aggregate(Lineups$ROI, by=list(Lineups$points_system), FUN=mean)
agg_results_max_games <- aggregate(Lineups$ROI, by=list(Lineups$max_games), FUN=mean)
agg_results_date <- aggregate(Lineups$ROI, by=list(Lineups$Date), FUN=mean)
#=====================================================================#
#                           Output Results                            #
#=====================================================================#
#write.csv(agg_results,paste(path_to_proj,'/Model/CumulativeResults',date_string,'.csv',sep=""), row.names =FALSE)
plot(Lineups$iteration, Lineups$ROI, main="Scatterplot Projection_dff_fsp",
xlab="Salary", ylab="Actual to Predicted Success", pch=19)
abline(lm(Lineups$ROI~Lineups$iteration), col="red") # regression line (y~x)
lines(lowess(Lineups$ROI~Lineups$iteration), col="blue") # lowess line (x,y)
#Plot chart for dff_fsp predictions
plot(Lineups$iteration, Lineups$ROI, main="Scatterplot Projection_dff_fsp",
xlab="Salary", ylab="Actual to Predicted Success", pch=19, ylim=c(0,3))
abline(lm(Lineups$ROI~Lineups$iteration), col="red") # regression line (y~x)
lines(lowess(Lineups$ROI~Lineups$iteration), col="blue") # lowess line (x,y)
#Plot chart for dff_fsp predictions
plot(Lineups$iteration, Lineups$ROI, main="Scatterplot Projection_dff_fsp",
xlab="Salary", ylab="Actual to Predicted Success", pch=19, ylim=c(0,5))
abline(lm(Lineups$ROI~Lineups$iteration), col="red") # regression line (y~x)
lines(lowess(Lineups$ROI~Lineups$iteration), col="blue") # lowess line (x,y)
#Plot chart for dff_fsp predictions
plot(Lineups$iteration, Lineups$ROI, main="Scatterplot Projection_dff_fsp",
xlab="Salary", ylab="Actual to Predicted Success", pch=19, ylim=c(0,10))
abline(lm(Lineups$ROI~Lineups$iteration), col="red") # regression line (y~x)
lines(lowess(Lineups$ROI~Lineups$iteration), col="blue") # lowess line (x,y)
library(hashmap)
library(caTools)
library(data.table)
library(lubridate)
library(rpart)
library(rpart.plot)
library(xgboost)
library(glmnet)
library(dplyr)
library(tidyr)
# Clear the workstation and read in data
rm(list=ls())
date_string ="20191130"
num_lineups = 20
path_to_proj = "/Users/nicholasrenegar/Google Drive/NJR Sports/NFL Draftkings"
setwd(path_to_proj)
#=====================================================================#
#            Import All Aggregate Results and Combine                 #
#=====================================================================#
LineupFileNames = list.files(paste(path_to_proj,'/Model/Output/Results/',sep=''))
LineupFileNames = LineupFileNames[grep("Lineup", LineupFileNames)]
Lineups <- data.frame(matrix(ncol = 22, nrow = 0))
for (filename in LineupFileNames){
currentLineup = read.csv(file = paste(path_to_proj,'/Model/Output/Results/',filename,sep=""), header = TRUE)
currentLineup$Filename = filename
Lineups <- rbind(Lineups,currentLineup)
}
Lineups = na.omit(Lineups)
#=====================================================================#
#                 Get Aggregate Results by Parameters                 #
#=====================================================================#
agg_results <- aggregate(Lineups$ROI, by=list(Lineups$points_system,
Lineups$max_games,
Lineups$Date), FUN=mean)
agg_results_points_system <- aggregate(Lineups$ROI, by=list(Lineups$points_system), FUN=mean)
agg_results_max_games <- aggregate(Lineups$ROI, by=list(Lineups$max_games), FUN=mean)
agg_results_date <- aggregate(Lineups$ROI, by=list(Lineups$Date), FUN=mean)
#=====================================================================#
#                           Output Results                            #
#=====================================================================#
#write.csv(agg_results,paste(path_to_proj,'/Model/CumulativeResults',date_string,'.csv',sep=""), row.names =FALSE)
#=====================================================================#
#                     Plot ROI by Lineup Number                       #
#=====================================================================#
#Plot chart for dff_fsp predictions
plot(Lineups$iteration, Lineups$ROI, main="ROI vs Iteration",
xlab="Iteration", ylab="ROI", pch=19, ylim=c(0,10))
abline(lm(Lineups$ROI~Lineups$iteration), col="red") # regression line (y~x)
lines(lowess(Lineups$ROI~Lineups$iteration), col="blue") # lowess line (x,y)
Lineups$ROI_Adj = pmin(Lineups$ROI,10)
Lineups$ROI_Adj = pmin(Lineups$ROI,10)
plot(Lineups$iteration, Lineups$ROI_Adj, main="ROI vs Iteration",
xlab="Iteration", ylab="ROI", pch=19, ylim=c(0,10))
abline(lm(Lineups$ROI_Adj~Lineups$iteration), col="red") # regression line (y~x)
lines(lowess(Lineups$ROI_Adj~Lineups$iteration), col="blue") # lowess line (x,y)
library(hashmap)
library(caTools)
library(data.table)
library(lubridate)
library(rpart)
library(rpart.plot)
library(xgboost)
library(glmnet)
library(dplyr)
library(tidyr)
# Clear the workstation and read in data
rm(list=ls())
date_string ="20191130"
num_lineups = 20
path_to_proj = "/Users/nicholasrenegar/Google Drive/NJR Sports/NBA Draftkings"
setwd(path_to_proj)
#=====================================================================#
#            Import All Aggregate Results and Combine                 #
#=====================================================================#
LineupFileNames = list.files(paste(path_to_proj,'/Model/Output/Results/',sep=''))
LineupFileNames = LineupFileNames[grep("Lineup", LineupFileNames)]
Lineups <- data.frame(matrix(ncol = 22, nrow = 0))
for (filename in LineupFileNames){
currentLineup = read.csv(file = paste(path_to_proj,'/Model/Output/Results/',filename,sep=""), header = TRUE)
currentLineup$Filename = filename
Lineups <- rbind(Lineups,currentLineup)
}
Lineups = na.omit(Lineups)
#=====================================================================#
#                 Get Aggregate Results by Parameters                 #
#=====================================================================#
agg_results <- aggregate(Lineups$ROI, by=list(Lineups$starters,
Lineups$points_system,
Lineups$max_games,
Lineups$Date), FUN=mean)
agg_results_starters <- aggregate(Lineups$ROI, by=list(Lineups$starters), FUN=mean)
agg_results_points_system <- aggregate(Lineups$ROI, by=list(Lineups$points_system), FUN=mean)
agg_results_max_games <- aggregate(Lineups$ROI, by=list(Lineups$max_games), FUN=mean)
agg_results_date <- aggregate(Lineups$ROI, by=list(Lineups$Date), FUN=mean)
#agg_results_num_lineups <- aggregate(Lineups$ROI, by=list(Lineups$num_lineups), FUN=mean)
#agg_results_num_overlap <- aggregate(Lineups$ROI, by=list(Lineups$num_overlap), FUN=mean)
#agg_results_max_appearances <- aggregate(Lineups$ROI, by=list(Lineups$max_appearances), FUN=mean)
agg_results_alpha <- aggregate(Lineups$ROI, by=list(Lineups$alpha), FUN=mean)
#=====================================================================#
#                           Output Results                            #
#=====================================================================#
#write.csv(agg_results,paste(path_to_proj,'/Model/AggregateResults',date_string,'.csv',sep=""), row.names =FALSE)
#=====================================================================#
#                     Plot ROI by Lineup Number                       #
#=====================================================================#
#Plot chart for dff_fsp predictions
Lineups$ROI_Adj = pmin(Lineups$ROI,10)
plot(Lineups$iteration, Lineups$ROI_Adj, main="ROI vs Iteration",
xlab="Iteration", ylab="ROI", pch=19, ylim=c(0,10))
abline(lm(Lineups$ROI_Adj~Lineups$iteration), col="red") # regression line (y~x)
lines(lowess(Lineups$ROI_Adj~Lineups$iteration), col="blue") # lowess line (x,y)
#Plot chart for dff_fsp predictions
Lineups$ROI_Adj = pmin(Lineups$ROI,30)
plot(Lineups$iteration, Lineups$ROI_Adj, main="ROI vs Iteration",
xlab="Iteration", ylab="ROI", pch=19, ylim=c(0,30))
abline(lm(Lineups$ROI_Adj~Lineups$iteration), col="red") # regression line (y~x)
lines(lowess(Lineups$ROI_Adj~Lineups$iteration), col="blue") # lowess line (x,y)
library(hashmap)
library(caTools)
library(data.table)
library(lubridate)
library(rpart)
library(rpart.plot)
library(xgboost)
library(glmnet)
library(dplyr)
library(tidyr)
# Clear the workstation and read in data
rm(list=ls())
date_string ="20191130"
num_lineups = 20
path_to_proj = "/Users/nicholasrenegar/Google Drive/NJR Sports/NFL Draftkings"
setwd(path_to_proj)
#=====================================================================#
#            Import All Aggregate Results and Combine                 #
#=====================================================================#
LineupFileNames = list.files(paste(path_to_proj,'/Model/Output/Results/',sep=''))
LineupFileNames = LineupFileNames[grep("Lineup", LineupFileNames)]
Lineups <- data.frame(matrix(ncol = 22, nrow = 0))
for (filename in LineupFileNames){
currentLineup = read.csv(file = paste(path_to_proj,'/Model/Output/Results/',filename,sep=""), header = TRUE)
currentLineup$Filename = filename
Lineups <- rbind(Lineups,currentLineup)
}
Lineups = na.omit(Lineups)
#=====================================================================#
#                 Get Aggregate Results by Parameters                 #
#=====================================================================#
agg_results <- aggregate(Lineups$ROI, by=list(Lineups$points_system,
Lineups$max_games,
Lineups$Date), FUN=mean)
agg_results_points_system <- aggregate(Lineups$ROI, by=list(Lineups$points_system), FUN=mean)
agg_results_max_games <- aggregate(Lineups$ROI, by=list(Lineups$max_games), FUN=mean)
agg_results_date <- aggregate(Lineups$ROI, by=list(Lineups$Date), FUN=mean)
#=====================================================================#
#                           Output Results                            #
#=====================================================================#
#write.csv(agg_results,paste(path_to_proj,'/Model/CumulativeResults',date_string,'.csv',sep=""), row.names =FALSE)
#=====================================================================#
#                     Plot ROI by Lineup Number                       #
#=====================================================================#
#Plot chart for dff_fsp predictions
Lineups$ROI_Adj = pmin(Lineups$ROI,10)
plot(Lineups$iteration, Lineups$ROI_Adj, main="ROI vs Iteration",
xlab="Iteration", ylab="ROI", pch=19, ylim=c(0,10))
abline(lm(Lineups$ROI_Adj~Lineups$iteration), col="red") # regression line (y~x)
lines(lowess(Lineups$ROI_Adj~Lineups$iteration), col="blue") # lowess line (x,y)
library(hashmap)
library(caTools)
library(data.table)
library(lubridate)
library(rpart)
library(rpart.plot)
library(xgboost)
library(glmnet)
library(dplyr)
library(tidyr)
# Clear the workstation and read in data
rm(list=ls())
date_string ="20191130"
num_lineups = 20
path_to_proj = "/Users/nicholasrenegar/Google Drive/NJR Sports/NFL Draftkings"
setwd(path_to_proj)
#=====================================================================#
#            Import All Aggregate Results and Combine                 #
#=====================================================================#
LineupFileNames = list.files(paste(path_to_proj,'/Model/Output/Results/',sep=''))
LineupFileNames = LineupFileNames[grep("Lineup", LineupFileNames)]
Lineups <- data.frame(matrix(ncol = 22, nrow = 0))
for (filename in LineupFileNames){
currentLineup = read.csv(file = paste(path_to_proj,'/Model/Output/Results/',filename,sep=""), header = TRUE)
currentLineup$Filename = filename
Lineups <- rbind(Lineups,currentLineup)
}
Lineups = na.omit(Lineups)
#=====================================================================#
#                 Get Aggregate Results by Parameters                 #
#=====================================================================#
agg_results <- aggregate(Lineups$ROI, by=list(Lineups$points_system,
Lineups$max_games,
Lineups$Date), FUN=mean)
agg_results_points_system <- aggregate(Lineups$ROI, by=list(Lineups$points_system), FUN=mean)
agg_results_max_games <- aggregate(Lineups$ROI, by=list(Lineups$max_games), FUN=mean)
agg_results_date <- aggregate(Lineups$ROI, by=list(Lineups$Date), FUN=mean)
#=====================================================================#
#                           Output Results                            #
#=====================================================================#
#write.csv(agg_results,paste(path_to_proj,'/Model/CumulativeResults',date_string,'.csv',sep=""), row.names =FALSE)
#=====================================================================#
#                     Plot ROI by Lineup Number                       #
#=====================================================================#
#Plot chart for dff_fsp predictions
Lineups$ROI_Adj = pmin(Lineups$ROI,20)
plot(Lineups$iteration, Lineups$ROI_Adj, main="ROI vs Iteration",
xlab="Iteration", ylab="ROI", pch=19, ylim=c(0,20))
abline(lm(Lineups$ROI_Adj~Lineups$iteration), col="red") # regression line (y~x)
lines(lowess(Lineups$ROI_Adj~Lineups$iteration), col="blue") # lowess line (x,y)
library(hashmap)
library(caTools)
library(data.table)
library(lubridate)
library(rpart)
library(rpart.plot)
library(xgboost)
library(glmnet)
library(dplyr)
# Clear the workstation and read in data
rm(list=ls())
# Clear the workstation and read in data
rm(list=ls())
path_to_proj = "/Users/nicholasrenegar/Desktop/Github/NHL DraftKings"
setwd(path_to_proj)
#=====================================================================#
#                      Begin with Players and Salaries                #
#=====================================================================#
#Get salaries
path_to_salaries = paste(path_to_proj,"/Data//DKSalaries.csv",sep = "")
player_salaries_init = read.csv(path_to_salaries, header = TRUE, stringsAsFactors = FALSE) %>% arrange(Name)
path_to_injuries_cbs = paste(path_to_proj,"/Data/Injuries_CBS", date_string, ".csv",sep = "")
injuries_cbs = read.csv(path_to_injuries_cbs, header = TRUE, stringsAsFactors = FALSE) %>% arrange(Name)
path_to_injuries_cbs = paste(path_to_proj,"/Data/Injuries_CBS.csv",sep = "")
injuries_cbs = read.csv(path_to_injuries_cbs, header = TRUE, stringsAsFactors = FALSE) %>% arrange(Name)
View(injuries_cbs)
View(player_salaries_init)
library(hashmap)
library(caTools)
library(data.table)
library(lubridate)
library(rpart)
library(rpart.plot)
library(xgboost)
library(glmnet)
library(dplyr)
# Clear the workstation and set directory path
rm(list=ls())
path_to_proj = "/Users/nicholasrenegar/Desktop/Github/NHL DraftKings"
setwd(path_to_proj)
#=====================================================================#
#      Begin with DK Salaries and Positions (From Contest Lobby)      #
#=====================================================================#
#Get salaries
path_to_salaries = paste(path_to_proj,"/Data//DKSalaries.csv",sep = "")
player_salaries = read.csv(path_to_salaries, header = TRUE, stringsAsFactors = FALSE) %>% arrange(Name)
#=====================================================================#
#                  Remove Injured Players from CBS                    #
#=====================================================================#
path_to_injuries_cbs = paste(path_to_proj,"/Data/Injuries_CBS.csv",sep = "")
injuries_cbs = read.csv(path_to_injuries_cbs, header = TRUE, stringsAsFactors = FALSE) %>% arrange(Name)
#Remove Injured Players
player_salaries_noinjuries <- player_salaries[!(player_salaries$Name %in% injuries_cbs$Name),]
# number of players we are using
num_players = nrow(player_salaries)
# create dataframe for model input
players = data.frame(matrix(vector(), num_players, 15,
dimnames=list(c(), c("ID","Name", "Salary","Position", "AvgPoints",
"C1","C2","W1","W2","W3","D1","D2", "G", "Util",
"GameInfo"))),
stringsAsFactors=F)
View(player_salaries)
unique(player_salaries$Position)
players$ID = player_salaries$ID
players$Name = player_salaries$Name
players$Salary = player_salaries$Salary
players$Position = player_salaries$Position
players$GameInfo = player_salaries$Game.Info
# determine which position each player can be counted for
players = players %>%
mutate(C1 = ifelse(Position %in% c("C"), 1, 0),
C2 = ifelse(Position %in% c("C"), 1, 0),
W1 = ifelse(Position %in% c("LW", "RW"), 1, 0),
W2 = ifelse(Position %in% c("LW", "RW"), 1, 0),
W3 = ifelse(Position %in% c("LW", "RW"), 1, 0),
D1 = ifelse(Position %in% c("D"), 1, 0),
D2 = ifelse(Position %in% c("D"), 1, 0),
G = ifelse(Position %in% c("G"), 1, 0),
Util = ifelse(Position %in% c("LW", "RW","C", "D"), 1, 0))
View(players)
# number of players we are using
num_players = nrow(player_salaries)
# create dataframe for model input
players = data.frame(matrix(vector(), num_players, 15,
dimnames=list(c(), c("ID","Name", "Salary","Position", "Points",
"C1","C2","W1","W2","W3","D1","D2", "G", "Util",
"GameInfo"))),
stringsAsFactors=F)
# add player names, salaries, and positions
players$ID = player_salaries$ID
players$Name = player_salaries$Name
players$Salary = player_salaries$Salary
players$Position = player_salaries$Position
players$GameInfo = player_salaries$Game.Info
# determine which position each player can be counted for
players = players %>%
mutate(C1 = ifelse(Position %in% c("C"), 1, 0),
C2 = ifelse(Position %in% c("C"), 1, 0),
W1 = ifelse(Position %in% c("LW", "RW"), 1, 0),
W2 = ifelse(Position %in% c("LW", "RW"), 1, 0),
W3 = ifelse(Position %in% c("LW", "RW"), 1, 0),
D1 = ifelse(Position %in% c("D"), 1, 0),
D2 = ifelse(Position %in% c("D"), 1, 0),
G = ifelse(Position %in% c("G"), 1, 0),
Util = ifelse(Position %in% c("LW", "RW","C", "D"), 1, 0))
# add points predictions, variance
players$Points = player_salaries$AvgPointsPerGame
View(players)
write.csv(players,paste(path_to_proj,'Output/MIPS Model Input.csv',sep=""))
write.csv(players,paste(path_to_proj,'/Output/MIPS Model Input.csv',sep=""))
View(player_salaries_noinjuries)
library(hashmap)
library(caTools)
library(data.table)
library(lubridate)
library(rpart)
library(rpart.plot)
library(xgboost)
library(glmnet)
library(dplyr)
# Clear the workstation and set directory path
rm(list=ls())
path_to_proj = "/Users/nicholasrenegar/Desktop/Github/NHL DraftKings"
setwd(path_to_proj)
#=====================================================================#
#      Begin with DK Salaries and Positions (From Contest Lobby)      #
#=====================================================================#
#Get salaries
path_to_salaries = paste(path_to_proj,"/Data//DKSalaries.csv",sep = "")
player_salaries = read.csv(path_to_salaries, header = TRUE, stringsAsFactors = FALSE) %>% arrange(Name)
#=====================================================================#
#                  Remove Injured Players from CBS                    #
#=====================================================================#
path_to_injuries_cbs = paste(path_to_proj,"/Data/Injuries_CBS.csv",sep = "")
injuries_cbs = read.csv(path_to_injuries_cbs, header = TRUE, stringsAsFactors = FALSE) %>% arrange(Name)
#Remove Injured Players
player_salaries_noinjuries <- player_salaries[!(player_salaries$Name %in% injuries_cbs$Name),]
#=====================================================================#
#                Prepare Input Dataframe for MIP                      #
#=====================================================================#
# number of players we are using
num_players = nrow(player_salaries)
# create dataframe for model input
players = data.frame(matrix(vector(), num_players, 16,
dimnames=list(c(), c("ID","Name", "Salary","Position", "Points",
"C1","C2","W1","W2","W3","D1","D2", "G", "Util",
"Team","GameInfo"))),
stringsAsFactors=F)
# add player names, salaries, and positions
players$ID = player_salaries$ID
players$Name = player_salaries$Name
players$Salary = player_salaries$Salary
players$Position = player_salaries$Position
players$Team = player_salaries$Team
players$GameInfo = player_salaries$Game.Info
# determine which position each player can be counted for
players = players %>%
mutate(C1 = ifelse(Position %in% c("C"), 1, 0),
C2 = ifelse(Position %in% c("C"), 1, 0),
W1 = ifelse(Position %in% c("LW", "RW"), 1, 0),
W2 = ifelse(Position %in% c("LW", "RW"), 1, 0),
W3 = ifelse(Position %in% c("LW", "RW"), 1, 0),
D1 = ifelse(Position %in% c("D"), 1, 0),
D2 = ifelse(Position %in% c("D"), 1, 0),
G = ifelse(Position %in% c("G"), 1, 0),
Util = ifelse(Position %in% c("LW", "RW","C", "D"), 1, 0))
# add points predictions, variance
players$Points = player_salaries$AvgPointsPerGame
write.csv(players,paste(path_to_proj,'/Output/MIPS Model Input.csv',sep=""))
View(players)
#library(hashmap)
#library(caTools)
#library(data.table)
#library(lubridate)
#library(rpart)
#library(rpart.plot)
#library(xgboost)
#library(glmnet)
library(dplyr)
# Clear the workstation and set directory path
rm(list=ls())
path_to_proj = "/Users/nicholasrenegar/Desktop/Github/NHL DraftKings"
setwd(path_to_proj)
#=====================================================================#
#      Begin with DK Salaries and Positions (From Contest Lobby)      #
#=====================================================================#
#Get salaries
path_to_salaries = paste(path_to_proj,"/Data//DKSalaries.csv",sep = "")
player_salaries = read.csv(path_to_salaries, header = TRUE, stringsAsFactors = FALSE) %>% arrange(Name)
#=====================================================================#
#                  Remove Injured Players from CBS                    #
#=====================================================================#
path_to_injuries_cbs = paste(path_to_proj,"/Data/Injuries_CBS.csv",sep = "")
injuries_cbs = read.csv(path_to_injuries_cbs, header = TRUE, stringsAsFactors = FALSE) %>% arrange(Name)
#Remove Injured Players
player_salaries_noinjuries <- player_salaries[!(player_salaries$Name %in% injuries_cbs$Name),]
#=====================================================================#
#                Prepare Input Dataframe for MIP                      #
#=====================================================================#
# number of players we are using
num_players = nrow(player_salaries)
# create dataframe for model input
players = data.frame(matrix(vector(), num_players, 16,
dimnames=list(c(), c("ID","Name", "Salary","Position", "Points",
"C1","C2","W1","W2","W3","D1","D2", "G", "Util",
"Team","GameInfo"))),
stringsAsFactors=F)
# add player names, salaries, and positions
players$ID = player_salaries$ID
players$Name = player_salaries$Name
players$Salary = player_salaries$Salary
players$Position = player_salaries$Position
players$Team = player_salaries$Team
players$GameInfo = player_salaries$Game.Info
# determine which position each player can be counted for
players = players %>%
mutate(C1 = ifelse(Position %in% c("C"), 1, 0),
C2 = ifelse(Position %in% c("C"), 1, 0),
W1 = ifelse(Position %in% c("LW", "RW"), 1, 0),
W2 = ifelse(Position %in% c("LW", "RW"), 1, 0),
W3 = ifelse(Position %in% c("LW", "RW"), 1, 0),
D1 = ifelse(Position %in% c("D"), 1, 0),
D2 = ifelse(Position %in% c("D"), 1, 0),
G = ifelse(Position %in% c("G"), 1, 0),
Util = ifelse(Position %in% c("LW", "RW","C", "D"), 1, 0))
# add points predictions, variance
players$Points = player_salaries$AvgPointsPerGame
write.csv(players,paste(path_to_proj,'/Output/MIPS Model Input.csv',sep=""))
View(players)
